using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Accord.MachineLearning;
using Accord.Math;
using Accord.Statistics.Kernels;


class K_MeansAlgorithm
    {

    public double[] x = new double[10];
    public double[] y = new double[10];


    public void AssignDataFromPerson(double age,double income, int i)
    {
        this.x[i] = age;
        this.y[i] = income;

    }

    public void Init(/*double[] data*/)
    {


        // Perform KMeans clustering on each dataset
        /*for (int i = 0; i < this.x.Length; i++)
        {
            //List<double[]> data = datasets[i];

            //int k = 3; // Number of clusters
            Console.WriteLine($"Dataset {i + 1}");

            Console.WriteLine();
        }*/
        PerformKMeansClustering(/*this.x, this.y*/);

    }

    static public void PerformKMeansClustering(/*double[] data1,double[] data2*/)
    {
        int k = 12;
        

        // Create KMeans algorithm
        KMeans kmeans = new KMeans(k);
        
        List<double[]> data = new List<double[]>();

        List<double[]> data1 = GenerateDataPoints(15);
        List<double[]> data2 = GenerateDataPoints(150);

        data.AddRange(data1);
        data.AddRange(data2);

        // Compute clusters
        int[] clusterAssignments = kmeans.Compute(data.ToArray());

        // Print cluster assignments for data1
        Console.WriteLine("\n\n\n\n Cluster assignments for data1:");
        for (int i = 0; i < clusterAssignments.Length / 2; i++)
        {
            Console.WriteLine($"Data point {data[i+1][0]:F2} belongs to cluster {clusterAssignments[i] + 1}");
        }

        // Print cluster assignments for data2
        Console.WriteLine("\n\n Cluster assignments for data2:");
        for (int i = clusterAssignments.Length / 2; i < clusterAssignments.Length; i++)
        {
            Console.WriteLine($"Data point {i - clusterAssignments.Length / 2 + 1} belongs to cluster {clusterAssignments[i] + 1}");
        }
    }

    static List<double[]> GenerateDataPoints(int numPoints)
    {
        Random rand = new Random();
        List<double[]> data = new List<double[]>();

        for (int i = 0; i < numPoints; i++)
        {
            double x = rand.NextDouble() * 10;
            double y = rand.NextDouble() * 10;
            data.Add(new double[] { x, y });
        }

        return data;
    }


}
